/*
 * Things
 *
 * Copyright (c) 2014, Markus Binsteiner. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 */

/**
 * This class is generated by jOOQ
 */
package projectdb.tables;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value = {"http://www.jooq.org", "3.3.2"},
        comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Site extends org.jooq.impl.TableImpl<projectdb.tables.records.SiteRecord> {

    /**
     * The singleton instance of <code>projectdb.site</code>
     */
    public static final projectdb.tables.Site SITE = new projectdb.tables.Site();
    private static final long serialVersionUID = -395572904;
    /**
     * The column <code>projectdb.site.id</code>.
     */
    public final org.jooq.TableField<projectdb.tables.records.SiteRecord, java.lang.Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column <code>projectdb.site.name</code>.
     */
    public final org.jooq.TableField<projectdb.tables.records.SiteRecord, java.lang.String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "");

    /**
     * Create a <code>projectdb.site</code> table reference
     */
    public Site() {
        this("site", null);
    }

    /**
     * Create an aliased <code>projectdb.site</code> table reference
     */
    public Site(java.lang.String alias) {
        this(alias, projectdb.tables.Site.SITE);
    }

    private Site(java.lang.String alias, org.jooq.Table<projectdb.tables.records.SiteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Site(java.lang.String alias, org.jooq.Table<projectdb.tables.records.SiteRecord> aliased, org.jooq.Field<?>[] parameters) {
        super(alias, projectdb.Projectdb.PROJECTDB, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public projectdb.tables.Site as(java.lang.String alias) {
        return new projectdb.tables.Site(alias, this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public java.util.List<org.jooq.UniqueKey<projectdb.tables.records.SiteRecord>> getKeys() {
        return java.util.Arrays.<org.jooq.UniqueKey<projectdb.tables.records.SiteRecord>>asList(projectdb.Keys.KEY_SITE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public org.jooq.UniqueKey<projectdb.tables.records.SiteRecord> getPrimaryKey() {
        return projectdb.Keys.KEY_SITE_PRIMARY;
    }

    /**
     * The class holding records for this type
     */
    @Override
    public java.lang.Class<projectdb.tables.records.SiteRecord> getRecordType() {
        return projectdb.tables.records.SiteRecord.class;
    }

    /**
     * Rename this table
     */
    public projectdb.tables.Site rename(java.lang.String name) {
        return new projectdb.tables.Site(name, null);
    }
}
