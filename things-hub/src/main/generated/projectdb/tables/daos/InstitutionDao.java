/*
 * Things
 *
 * Copyright (c) 2014, Markus Binsteiner. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 */

/**
 * This class is generated by jOOQ
 */
package projectdb.tables.daos;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value = {"http://www.jooq.org", "3.3.2"},
        comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({"all", "unchecked", "rawtypes"})
public class InstitutionDao extends org.jooq.impl.DAOImpl<projectdb.tables.records.InstitutionRecord, projectdb.tables.pojos.Institution, java.lang.Integer> {

    /**
     * Create a new InstitutionDao without any configuration
     */
    public InstitutionDao() {
        super(projectdb.tables.Institution.INSTITUTION, projectdb.tables.pojos.Institution.class);
    }

    /**
     * Create a new InstitutionDao with an attached configuration
     */
    public InstitutionDao(org.jooq.Configuration configuration) {
        super(projectdb.tables.Institution.INSTITUTION, projectdb.tables.pojos.Institution.class, configuration);
    }

    /**
     * Fetch records that have <code>code IN (values)</code>
     */
    public java.util.List<projectdb.tables.pojos.Institution> fetchByCode(java.lang.String... values) {
        return fetch(projectdb.tables.Institution.INSTITUTION.CODE, values);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public java.util.List<projectdb.tables.pojos.Institution> fetchById(java.lang.Integer... values) {
        return fetch(projectdb.tables.Institution.INSTITUTION.ID, values);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public java.util.List<projectdb.tables.pojos.Institution> fetchByName(java.lang.String... values) {
        return fetch(projectdb.tables.Institution.INSTITUTION.NAME, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public projectdb.tables.pojos.Institution fetchOneById(java.lang.Integer value) {
        return fetchOne(projectdb.tables.Institution.INSTITUTION.ID, value);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected java.lang.Integer getId(projectdb.tables.pojos.Institution object) {
        return object.getId();
    }
}
