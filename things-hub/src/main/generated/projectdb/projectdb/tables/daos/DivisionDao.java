/**
 * This class is generated by jOOQ
 */
package projectdb.tables.daos;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.3.2" },
                            comments = "This class is generated by jOOQ")
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DivisionDao extends org.jooq.impl.DAOImpl<projectdb.tables.records.DivisionRecord, projectdb.tables.pojos.Division, Integer> {

	/**
	 * Create a new DivisionDao without any panAuditConfiguration
	 */
	public DivisionDao() {
		super(projectdb.tables.Division.DIVISION, projectdb.tables.pojos.Division.class);
	}

	/**
	 * Create a new DivisionDao with an attached panAuditConfiguration
	 */
	public DivisionDao(org.jooq.Configuration configuration) {
		super(projectdb.tables.Division.DIVISION, projectdb.tables.pojos.Division.class, configuration);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected Integer getId(projectdb.tables.pojos.Division object) {
		return object.getId();
	}

	/**
	 * Fetch records that have <code>id IN (values)</code>
	 */
	public java.util.List<projectdb.tables.pojos.Division> fetchById(Integer... values) {
		return fetch(projectdb.tables.Division.DIVISION.ID, values);
	}

	/**
	 * Fetch a unique record that has <code>id = value</code>
	 */
	public projectdb.tables.pojos.Division fetchOneById(Integer value) {
		return fetchOne(projectdb.tables.Division.DIVISION.ID, value);
	}

	/**
	 * Fetch records that have <code>institutionId IN (values)</code>
	 */
	public java.util.List<projectdb.tables.pojos.Division> fetchByInstitutionid(Integer... values) {
		return fetch(projectdb.tables.Division.DIVISION.INSTITUTIONID, values);
	}

	/**
	 * Fetch records that have <code>name IN (values)</code>
	 */
	public java.util.List<projectdb.tables.pojos.Division> fetchByName(String... values) {
		return fetch(projectdb.tables.Division.DIVISION.NAME, values);
	}

	/**
	 * Fetch records that have <code>code IN (values)</code>
	 */
	public java.util.List<projectdb.tables.pojos.Division> fetchByCode(String... values) {
		return fetch(projectdb.tables.Division.DIVISION.CODE, values);
	}
}
